
import tensorflow as tf
from transformers import TFBertModel

class CFHybridBERT4Rec(tf.keras.Model):
    def __init__(self, num_users, num_items, bert_model_name, hidden_size, dropout_prob):
        super(CFHybridBERT4Rec, self).__init__()
        self.num_users = num_users
        self.num_items = num_items
        self.hidden_size = hidden_size
        self.dropout_prob = dropout_prob
        
        # Embedding layers for users and items
        self.user_embedding = tf.keras.layers.Embedding(num_users, hidden_size)
        self.item_embedding = tf.keras.layers.Embedding(num_items, hidden_size)
        
        # BERT model for item tokens
        self.bert_model = TFBertModel.from_pretrained(bert_model_name)
        
        # Dropout layer
        self.dropout = tf.keras.layers.Dropout(dropout_prob)
        
        # Fully connected layers
        self.fc1 = tf.keras.layers.Dense(hidden_size, activation='relu')
        self.fc2 = tf.keras.layers.Dense(1, activation='sigmoid')
        
    def call(self, user_ids, item_ids, item_tokens, attention_mask):
        # Embedding lookup for users and items
        user_embedded = self.user_embedding(user_ids)
        item_embedded = self.item_embedding(item_ids)
        
        # BERT encoding for item tokens
        _, item_token_embeddings = self.bert_model(item_tokens, attention_mask=attention_mask)
        
        # Combine item embeddings with BERT embeddings
        item_embedded = item_embedded + item_token_embeddings[:, 0, :]
        item_embedded = self.dropout(item_embedded)
        
        # Concatenate user and item embeddings
        user_item_concat = tf.concat((user_embedded, item_embedded), axis=1)
        
        # Hidden layer and dropout
        user_item_hidden = self.fc1(user_item_concat)
        user_item_hidden = self.dropout(user_item_hidden)
        
        # Output prediction
        prediction = self.fc2(user_item_hidden)
        
        return prediction



import tensorflow as tf
from transformers import TFBertModel

class CFHybridBERT4Rec(tf.keras.Model):
    def __init__(self, num_users, num_items, num_numeric_features, bert_model_name, hidden_size, dropout_prob):
        super(CFHybridBERT4Rec, self).__init__()
        self.num_users = num_users
        self.num_items = num_items
        self.num_numeric_features = num_numeric_features
        self.hidden_size = hidden_size
        self.dropout_prob = dropout_prob
        
        # Embedding layers for users and items
        self.user_embedding = tf.keras.layers.Embedding(num_users, hidden_size)
        self.item_embedding = tf.keras.layers.Embedding(num_items, hidden_size)
        
        # Numeric features layer
        self.numeric_layer = tf.keras.layers.Dense(hidden_size)
        
        # BERT model for item tokens
        self.bert_model = TFBertModel.from_pretrained(bert_model_name)
        
        # Dropout layer
        self.dropout = tf.keras.layers.Dropout(dropout_prob)
        
        # Fully connected layers
        self.fc1 = tf.keras.layers.Dense(hidden_size, activation='relu')
        self.fc2 = tf.keras.layers.Dense(1, activation='sigmoid')
        
    def call(self, user_ids, item_ids, item_tokens, attention_mask, numeric_features):
        # Embedding lookup for users and items
        user_embedded = self.user_embedding(user_ids)
        item_embedded = self.item_embedding(item_ids)
        
        # BERT encoding for item tokens
        _, item_token_embeddings = self.bert_model(item_tokens, attention_mask=attention_mask)
        
        # Combine item embeddings with BERT embeddings
        item_embedded = item_embedded + item_token_embeddings[:, 0, :]
        item_embedded = self.dropout(item_embedded)
        
        # Numeric features layer
        numeric_embedded = self.numeric_layer(numeric_features)
        
        # Concatenate user and item embeddings with numeric features
        user_item_concat = tf.concat((user_embedded, item_embedded, numeric_embedded), axis=1)
        
        # Hidden layer and dropout
        user_item_hidden = self.fc1(user_item_concat)
        user_item_hidden = self.dropout(user_item_hidden)
        
        # Output prediction
        prediction = self.fc2(user_item_hidden)
        
        return prediction
